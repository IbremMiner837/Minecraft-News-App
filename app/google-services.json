/*
 * Copyright 2016 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.auto.value.processor;

import com.google.auto.common.MoreElements;
import com.google.auto.common.MoreTypes;
import com.google.common.base.Verify;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import java.util.List;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.TypeKind;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Types;

/**
 * A wrapper for properties of Optional-like classes. This can be com.google.common.base.Optional,
 * or any of Optional, OptionalDouble, OptionalInt, OptionalLong in java.util.
 *
 * @author emcmanus@google.com (Ã‰amonn McManus)
 */
public class Optionalish {
private static final ImmutableSet<String> OPTIONAL_CLASS_NAMES =
ImmutableSet.of(
"com.".concat("google.common.base.Optional"), // subterfuge to foil shading
"java.util.Optional",
"java.util.OptionalDouble",
"java.util.OptionalInt",
"java.util.OptionalLong");

private final DeclaredType optionalType;
private final String className;

private Optionalish(DeclaredType optionalType) {
this.optionalType = optionalType;
this.className = MoreElements.asType(optionalType.asElement()).getQualifiedName().toString();
}

/**
 * Returns an instance wrapping the given TypeMirror, or null if it is not any kind of Optional.
 *
 * @param type the TypeMirror for the original optional type, for example {@code
 *     Optional<String>}.
 */
static Optionalish createIfOptional(TypeMirror type) {
if (isOptional(type)) {
return new Optionalish(MoreTypes.asDeclared(type));
} else {
return null;
}
}

static boolean isOptional(TypeMirror type) {
if (type.getKind() != TypeKind.DECLARED) {
return false;
}
DeclaredType declaredType = MoreTypes.asDeclared(type);
TypeElement typeElement = MoreElements.asType(declaredType.asElement());